#!/usr/bin/env python
# -*- coding: UTF8 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Sat Oct 19 12:01:28 2013
#

import wx
import serial
import os
if os.name != 'nt':
    import serial.tools.list_ports

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


def listPorts():
    # Windows
    if os.name == 'nt':
        # Szukaj dostępnych portów COM
        dost = []
        for i in range(10): # Przeszukuje tylko pierwsze 10 portów. Znacznie zmniejsza to czas operacji
            try:
                s = serial.Serial(i) # Spróbuj otworzyć port o numerze i
                dost.append('COM'+str(i + 1)) # Jeżeli się powiedzie to dodaj jego nazwę do listy dost
                s.close() # Zamknij port
            except serial.SerialException:
                pass # Jezeli się nie powiedzie to pomiń port
            except ValueError:
                pass
        return dost # Zwróć listę
    else:
        # Mac / Linux
        return [port[0] for port in serial.tools.list_ports.comports()] # Systemy Mac i GNU/Linux mają osobną funkcję do sprawdzania dostępnych portów     

vts25 = 150 # Zmienna kalibracji czujnika temperatury
ser = serial.Serial(timeout=1) # Zmienna przechowująca uchwyt do portu COM. W tym miejscu nie jest otwierany żaden port.
# Otwarcie następuje we funkcji portChange
ports = listPorts() # Lista zawierające dostępne porty COM

class calDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: calDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_2 = wx.StaticText(self, wx.ID_ANY, _(u"Aby skalibrowa\u0107 czujnik temperatury, prosz\u0119 umie\u015bci\u0107 urz\u0105dzenie w temperaturze 25 st. C i nacisn\u0105\u0107 OK."), style=wx.ALIGN_CENTRE)
        self.button_4 = wx.Button(self, wx.ID_OK, "")
        self.button_5 = wx.Button(self, wx.ID_ANY, "Anuluj")
        
        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.calOK, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.calCancel, self.button_5)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: calDialog.__set_properties
        self.SetTitle(_("Kalibracja"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: calDialog.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.label_2, 0, wx.ALL, 15)
        sizer_6.Add(self.button_4, 0, wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_6.Add(self.button_5, 0, wx.LEFT | wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_3.Add(sizer_6, 0, wx.BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        self.Layout()
        # end wxGlade

    def calOK(self, event):  # wxGlade: calDialog.<event_handler>
        global ser
        global vts25
        ser.write(chr(0x80)) # 
        resp = ser.read(3)
        if(resp[0] == chr(0x80)): # Sprawdzenie czy zostały odebrane właściwe dane
            vts25= ord(resp[1]) + (ord(resp[2])*256) # Resp[1] to niższy bajt wartości pomiaru, a resp[2] wyższy
            # Aby otrzymać 16-bitową liczbę, bajt wyższy należy pomnożyć przez 256 i dodać do niższego
        self.Destroy()
        

    def calCancel(self, event):  # wxGlade: calDialog.<event_handler>
        self.Destroy()

# end of class calDialog

class MyDialog2(wx.Dialog):
    def __init__(self, *args, **kwds):
        global ports
        # begin wxGlade: MyDialog2.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.choice_2 = wx.Choice(self, wx.ID_ANY, choices=ports)
        self.button_6 = wx.Button(self, wx.ID_ANY, _(u"Po\u0142\u0105cz"))
        self.sizer_9_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Ustawienia portu COM"))
        self.button_7 = wx.ToggleButton(self, wx.ID_ANY, _("LED3"))
        self.button_8 = wx.ToggleButton(self, wx.ID_ANY, _("LED4"))
        self.button_9 = wx.ToggleButton(self, wx.ID_ANY, _("LED5"))
        self.button_10 = wx.ToggleButton(self, wx.ID_ANY, _("LED6"))
        self.button_11 = wx.ToggleButton(self, wx.ID_ANY, _("LED7"))
        self.button_12 = wx.ToggleButton(self, wx.ID_ANY, _("LED8"))
        self.button_13 = wx.ToggleButton(self, wx.ID_ANY, _("LED9"))
        self.button_14 = wx.ToggleButton(self, wx.ID_ANY, _("LED10"))
        self.sizer_10_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Diody"))
        self.text_ctrl_7 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.label_4 = wx.StaticText(self, wx.ID_ANY, _("St. C"))
        self.button_15 = wx.Button(self, wx.ID_ANY, _("Odczyt"))
        self.button_16 = wx.Button(self, wx.ID_ANY, _("Kalibracja"))
        self.sizer_11_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Temperatura"))
        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.button_17 = wx.Button(self, wx.ID_ANY, _(u"Wy\u015blij"))
        self.text_ctrl_6 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.sizer_12_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Tekst"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.portChange, self.button_6)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED0, self.button_7)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED1, self.button_8)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED2, self.button_9)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED3, self.button_10)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED4, self.button_11)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED5, self.button_12)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED6, self.button_13)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.toggleLED7, self.button_14)
        self.Bind(wx.EVT_BUTTON, self.readTemp, self.button_15)
        self.Bind(wx.EVT_BUTTON, self.calibrate, self.button_16)
        self.Bind(wx.EVT_BUTTON, self.sendString, self.button_17)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog2.__set_properties
        self.SetTitle(_("STM32 Demo"))
        self.text_ctrl_2.SetMinSize((160, 50))
        self.text_ctrl_6.SetMinSize((160, 50))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog2.__do_layout
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_12_staticbox.Lower()
        sizer_12 = wx.StaticBoxSizer(self.sizer_12_staticbox, wx.VERTICAL)
        self.sizer_11_staticbox.Lower()
        sizer_11 = wx.StaticBoxSizer(self.sizer_11_staticbox, wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_10_staticbox.Lower()
        sizer_10 = wx.StaticBoxSizer(self.sizer_10_staticbox, wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(4, 2, 1, 5)
        self.sizer_9_staticbox.Lower()
        sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.VERTICAL)
        sizer_9.Add(self.choice_2, 0, wx.TOP, 10)
        sizer_9.Add(self.button_6, 0, wx.TOP, 5)
        sizer_8.Add(sizer_9, 1, wx.LEFT | wx.BOTTOM | wx.EXPAND, 5)
        grid_sizer_2.Add(self.button_7, 0, 0, 0)
        grid_sizer_2.Add(self.button_8, 0, 0, 0)
        grid_sizer_2.Add(self.button_9, 0, 0, 0)
        grid_sizer_2.Add(self.button_10, 0, 0, 0)
        grid_sizer_2.Add(self.button_11, 0, 0, 0)
        grid_sizer_2.Add(self.button_12, 0, 0, 0)
        grid_sizer_2.Add(self.button_13, 0, 0, 0)
        grid_sizer_2.Add(self.button_14, 0, 0, 0)
        sizer_10.Add(grid_sizer_2, 1, wx.LEFT | wx.EXPAND, 2)
        sizer_8.Add(sizer_10, 1, wx.LEFT | wx.BOTTOM | wx.EXPAND, 5)
        sizer_13.Add(self.text_ctrl_7, 0, 0, 0)
        sizer_13.Add(self.label_4, 0, wx.LEFT, 5)
        sizer_11.Add(sizer_13, 0, wx.TOP | wx.EXPAND, 5)
        sizer_11.Add(self.button_15, 0, wx.TOP, 5)
        sizer_11.Add(self.button_16, 0, wx.TOP, 10)
        sizer_8.Add(sizer_11, 1, wx.LEFT | wx.BOTTOM | wx.EXPAND, 5)
        sizer_12.Add(self.text_ctrl_2, 0, 0, 0)
        self.text_ctrl_2.SetMaxLength(62) # Ustawia maksymalną długość tekstu na 62 znaki. Maksymalna długość pakietu USB to 64 bajty.
        # 1 bajt kody polecenia + 1 bajt długości + 62 bajty znaków tekstu = 64 bajty
        sizer_12.Add(self.button_17, 0, wx.TOP | wx.BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 3)
        sizer_12.Add(self.text_ctrl_6, 0, 0, 0)
        sizer_8.Add(sizer_12, 1, wx.LEFT | wx.RIGHT | wx.BOTTOM | wx.EXPAND, 5)
        self.SetSizer(sizer_8)
        sizer_8.Fit(self)
        self.Layout()
        # end wxGlade

    def portChange(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser # deklarowanie globalnej zmiennej ser
        ser.close() # zamknięcie poprzednio otwartego portu
        choice = self.choice_2.GetSelection() # zapisanie wyboru z listy portów COM do zmiennej
        ser = serial.Serial(ports[choice], timeout=1) # otwarcie portu COM 
        # Wygaszenie wszystkich diod
        ser.write(chr(0x20))
        ser.write(chr(0x21))
        ser.write(chr(0x22))
        ser.write(chr(0x23))
        ser.write(chr(0x24))
        ser.write(chr(0x25))
        ser.write(chr(0x26))
        ser.write(chr(0x27))

    def toggleLED0(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject() # pobranie objektu w tym przypadku przycisku
        if(button.GetValue() == 0): # sprawdzenie wartości przycisku 
            ser.write(chr(0x20)) # jezeli wartość wynosi 0 czyli przycisk jest w pozycji wylaczonej to wysyła kod wylaczenia diody
        else:
            ser.write(chr(0x10)) # jezeli wartość wynosi 1 czyli przycisk jest w pozycji wlaczonej to wysyła kod załączenia diody

    # Tak samo wygląda obsługa pozostałych przycisków. Zmienia się tylko numer diody.
    def toggleLED1(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x21)) 
        else:
            ser.write(chr(0x11))
            
    def toggleLED2(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x22))
        else:
            ser.write(chr(0x12))
            
    def toggleLED3(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x23))
        else:
            ser.write(chr(0x13))
            
    def toggleLED4(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x24))
        else:
            ser.write(chr(0x14))

    def toggleLED5(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x25))
        else:
            ser.write(chr(0x15))
            
    def toggleLED6(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x26))
        else:
            ser.write(chr(0x16))
            
    def toggleLED7(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        button = event.GetEventObject()
        if(button.GetValue() == 0):
            ser.write(chr(0x27))
        else:
            ser.write(chr(0x17))

    def readTemp(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        global vts25 # Zmienna kalibracji. Jest to wartość pomiaru dla temperatury 25 st.
        avgslope = 4.3 # Typowa krzywizna funkcji mV(temp). Można ją odczytać z noty katalogowej układu
        ser.write(chr(0x80)) # Wysłanie kodu pomiaru temp
        resp = ser.read(3) # Odczytanie trzech bajtów z portu COM
        if(resp[0] == chr(0x80)): # Sprawdzenie czy zostały odebrane właściwe dane
            vts= ord(resp[1]) + (ord(resp[2])*256) # Resp[1] to niższy bajt wartości pomiaru, a resp[2] wyższy
            # Aby otrzymać 16-bitową liczbę, bajt wyższy należy pomnożyć przez 256 i dodać do niższego
            temp = ((vts25-vts)/avgslope) + 25 # Obliczenie temperatury. Wzór pochodzi z STM32F3xx Reference Manual
            self.text_ctrl_7.SetValue(str(temp)) # Wyświetlenie temperatury w polu tekstowym

    def calibrate(self, event):  # wxGlade: MyDialog2.<event_handler>
        dialog = calDialog(None, wx.ID_ANY, "");
        dialog.Show()

    def sendString(self, event):  # wxGlade: MyFrame3.<event_handler>
        global ser
        string = self.text_ctrl_2.GetString(0, -1) # Pobranie stringu z pola tekstowego
        ser.write(str(chr(0x40) + chr(len(string)) + string)) # Wysłanie go do STM32 poprzedzając kodem polecenia i jego długością
        if(ser.read(1) == chr(0x40)): # Sprawdzenie czy odpowiedź dotyczy stringu
            strLen = ord(ser.read(1)) # Odczytanie bajtu długości
            stringin = ser.read(strLen) # Odczytanie samego stringu
            self.text_ctrl_6.SetValue(stringin) # Wyświetlenie w polu tekstowym

    def OnClose(self, event): # handler do włączania aplikacji
        global ser 
        ser.close() # Zamknięcie portu COM
        self.Destroy() # Zamknięcie aplikacji 

# end of class MyDialog2
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    dialog_3 = MyDialog2(None, wx.ID_ANY, "")
    app.SetTopWindow(dialog_3)
    dialog_3.Show()
    app.MainLoop()
